{{- with .Values.policies.disallowAllSecrets -}}
{{- if .enabled }}
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: no-secrets
  annotations:
{{- with .autogenControllers }}
    pod-policies.kyverno.io/autogen-controllers: {{ . }}
{{- end }}
    policies.kyverno.io/title: Disallow all Secrets
    policies.kyverno.io/category: Other
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod, Secret
    kyverno.io/kyverno-version: 1.6.0
    policies.kyverno.io/minversion: 1.6.0
    kyverno.io/kubernetes-version: "1.21"
    policies.kyverno.io/description: >-
      Secrets often contain sensitive information which not all Pods need consume.
      This policy disables the use of all Secrets in a Pod definition. In order to work effectively,
      this Policy needs a separate Policy or rule to require `automountServiceAccountToken=false`
      at the Pod level or ServiceAccount level since this would otherwise result in a Secret being mounted.
      This ClusterPolicy in enforce mode is extraordinarily restrictive. Set .matchPods variable to only validate the policy
      for select pods (e.g. only in certain namespaces or with certain names/labels).
spec:
  validationFailureAction: {{ .validationFailureAction | default "Audit" }}
  background: {{ .background | default "true" }}
  rules:
{{- if .rulesOverride }}
{{ toYaml .rulesOverride | indent 4 }}
{{- else }}
    - name: secrets-not-from-env
      match:
        any:
          - resources:
              kinds:
                - Pod
{{- if .exclude }}
      exclude: {{ toYaml .exclude | nindent 8 }}
{{- end }}
      validate:
        message: "No Secrets from env."
        pattern:
          spec:
            =(ephemeralContainers):
              - name: "*"
                =(env):
                  - =(valueFrom):
                      X(secretKeyRef): "null"
            =(initContainers):
              - name: "*"
                =(env):
                  - =(valueFrom):
                      X(secretKeyRef): "null"
            containers:
              - name: "*"
                =(env):
                  - =(valueFrom):
                      X(secretKeyRef): "null"
    - name: secrets-not-from-envfrom
      match:
        any:
          - resources:
              kinds:
                - Pod
{{- if .exclude }}
      exclude: {{ toYaml .exclude | nindent 8 }}
{{- end }}
      validate:
        message: "No Secrets from envFrom."
        pattern:
          spec:
            =(ephemeralContainers):
              - name: "*"
                =(envFrom):
                  - X(secretRef): "null"
            =(initContainers):
              - name: "*"
                =(envFrom):
                  - X(secretRef): "null"
            containers:
              - name: "*"
                =(envFrom):
                  - X(secretRef): "null"
    - name: secrets-not-from-volumes
      match:
        any:
          - resources:
              kinds:
                - Pod
{{- if .exclude }}
      exclude: {{ toYaml .exclude | nindent 8 }}
{{- end }}
      validate:
        message: "No Secrets from volumes."
        pattern:
          spec:
            =(volumes):
              - X(secret): "null"
{{- end }}
{{- end }}
{{- end }}